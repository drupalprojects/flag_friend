<?php

/**
 * @file: provides access control for nodes. Allow only the users friends to
 * have access to it
 */

/**
 * Default access value, Flag Friend Access will not restrict access.
 */
define('FLAG_FRIEND_ACCESS_PUBLIC', 0);

/**
 * Friend access status where the author's friends may view the node.
 */
define('FLAG_FRIEND_ACCESS_FRIENDS_ONLY', 1);

/**
 * Friend access status where only the author may view the node.
 */
define('FLAG_FRIEND_ACCESS_PRIVATE', 2);

/**
 * Implements hook_node_grants().
 */
function flag_friend_access_node_grants($account, $op) {
  $grants = array();

  if (!empty($account->uid)) {
    $grants['flag_friend_author'] = array($account->uid);
  }

  if ($op == 'view') {
    $friends = flag_friend_get_friends($account->uid);
    if (!empty($friends)) {
      $grants['flag_friend'] = array_keys($friends);
    }
  }

  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function flag_friend_access_node_access_records($node) {
  $records = array();

  if (!empty($node->flag_friend_access)) {
    $records[] = array(
      'realm' => 'flag_friend_author',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 1,
      'grant_delete' => 1,
      'priority' => 5,
    );
  }

  if ($node->flag_friend_access == FLAG_FRIEND_ACCESS_FRIENDS_ONLY) {
    $records[] = array(
      'realm' => 'flag_friend',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 5,
    );
  }

  return $records;
}

/**
 * Implements hook_form_alter().
 */
function flag_friend_access_form_alter(&$form, &$form_state, $form_id) {
  // add in a checkbox only if the
  if (isset($form['#node']) && $form['#node']->type . '_node_form' == $form_id) {
    // We have a node form alter in our stuff.
    $form['flag_friend_control'] = array(
      '#type' => 'fieldset',
      '#title' => t('Friend Access Control'),
      '#collapsable' => FALSE,
    );
    $access_value = isset($form['#node']->nid) ? flag_friend_access_value($form['#node']->nid) : FALSE;
    $form['flag_friend_control']['flag_friend_access'] = array(
      '#type' => 'radios',
      '#title' => t('Who can see this post?'),
      '#options' => array(
        FLAG_FRIEND_ACCESS_PUBLIC => t('Everyone'),
        FLAG_FRIEND_ACCESS_FRIENDS_ONLY => t('Only my friends'),
        FLAG_FRIEND_ACCESS_PRIVATE => t('Just me'),
      ),
      '#default_value' => !empty($access_value) ? $access_value : FLAG_FRIEND_ACCESS_PUBLIC,
    );
  }
}

/**
 * Determine if we have an access entry already recorded.
 *
 * @param $nid
 *   Node id of the node to check.
 *
 * @param $reset = FALSE
 *  Whether or not to reset the static cache.
 *
 * @return
 *   The node access status.
 *
 */
function flag_friend_access_value($nid, $reset = FALSE) {
  static $nodes = array();

  if ($reset) {
    $nodes = array();
  }

  if (!isset($nodes[$nid])) {
    // Note that when there's no access record, fetchField() returns FALSE.
    // And FALSE is 0 in PHP, and 0 is FLAG_FRIEND_ACCESS_PUBLIC.
    $nodes[$nid] = db_query('SELECT status FROM {flag_friend_access} WHERE nid = :nid', array(':nid' => $nid))->fetchField();
  }

  return $nodes[$nid];
}

/**
 * Implements hook_node_load().
 */
function flag_friend_access_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    $node->flag_friend_access = flag_friend_access_value($node->nid);
  }
}

/**
 * Implements hook_node_insert().
 */
function flag_friend_access_node_insert($node) {
  $status = FLAG_FRIEND_ACCESS_PUBLIC;

  if ($node->flag_friend_access == FLAG_FRIEND_ACCESS_FRIENDS_ONLY) {
    $status = FLAG_FRIEND_ACCESS_FRIENDS_ONLY;
  }
  elseif ($node->flag_friend_access == FLAG_FRIEND_ACCESS_PRIVATE) {
    $status = FLAG_FRIEND_ACCESS_PRIVATE;
  }

  $id = db_insert('flag_friend_access')
    ->fields(array(
      'uid' => $node->uid,
      'nid' => $node->nid,
      'status' => $status,
    ))
    ->execute();
}

/**
 * Implements hook_node_update().
 */
function flag_friend_access_node_update($node) {
  $status = FLAG_FRIEND_ACCESS_PUBLIC;

  if ($node->flag_friend_access == FLAG_FRIEND_ACCESS_FRIENDS_ONLY) {
    $status = FLAG_FRIEND_ACCESS_FRIENDS_ONLY;
  }
  elseif ($node->flag_friend_access == FLAG_FRIEND_ACCESS_PRIVATE) {
    $status = FLAG_FRIEND_ACCESS_PRIVATE;
  }

  if ($status != flag_friend_access_value($node->nid)) {
    db_merge('flag_friend_access')
      ->key(array('nid' => $node->nid))
      ->fields(array(
        'uid' => $node->uid,
        'nid' => $node->nid,
        'status' => $status,
      ))
      ->execute();

    node_access_acquire_grants($node);
  }
}

/**
 * Implements hook_views_api().
 */
function flag_friend_access_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'flag_friend_access') . '/includes',
  );
}
